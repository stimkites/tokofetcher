2022.08.06 20:02:07.570185 [ 1 ] {} <Warning> Application: Calculated checksum of the binary: 38FD0E3944230CBD1E0C1028A9D68C83. There is no information about the reference checksum.
2022.08.06 20:02:07.593473 [ 1 ] {} <Warning> Access(local directory): File /var/lib/clickhouse/access/users.list doesn't exist
2022.08.06 20:02:07.593492 [ 1 ] {} <Warning> Access(local directory): Recovering lists in directory /var/lib/clickhouse/access/
2022.08.06 20:02:07.670531 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:02:07.670931 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:02:07.671299 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:02:07.671719 [ 1 ] {} <Warning> Application: Listen [::]:9004 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:02:07.672410 [ 1 ] {} <Warning> Application: Listen [::]:9005 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:08:05.721762 [ 86 ] {} <Error> void DB::MergeTreeBackgroundExecutor<DB::MergeMutateRuntimeQueue>::routine(DB::TaskRuntimeDataPtr) [Queue = DB::MergeMutateRuntimeQueue]: Code: 236. DB::Exception: Cancelled merging parts. (ABORTED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::MergeTask::ExecuteAndFinalizeHorizontalPart::prepare() @ 0x1425339c in /usr/bin/clickhouse
2. bool std::__1::__function::__policy_invoker<bool ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::MergeTask::ExecuteAndFinalizeHorizontalPart::subtasks::'lambda'(), bool ()> >(std::__1::__function::__policy_storage const*) @ 0x142608a9 in /usr/bin/clickhouse
3. DB::MergeTask::ExecuteAndFinalizeHorizontalPart::execute() @ 0x1425740b in /usr/bin/clickhouse
4. DB::MergeTask::execute() @ 0x1425c31a in /usr/bin/clickhouse
5. DB::MergePlainMergeTreeTask::executeStep() @ 0x1424dfcc in /usr/bin/clickhouse
6. DB::MergeTreeBackgroundExecutor<DB::MergeMutateRuntimeQueue>::routine(std::__1::shared_ptr<DB::TaskRuntimeData>) @ 0xa804fda in /usr/bin/clickhouse
7. DB::MergeTreeBackgroundExecutor<DB::MergeMutateRuntimeQueue>::threadFunction() @ 0xa804c39 in /usr/bin/clickhouse
8. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0xa8720aa in /usr/bin/clickhouse
9. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()&&...)::'lambda'()::operator()() @ 0xa873ec4 in /usr/bin/clickhouse
10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xa86f4b7 in /usr/bin/clickhouse
11. ? @ 0xa872ebd in /usr/bin/clickhouse
12. ? @ 0x7f6dd6229609 in ?
13. __clone @ 0x7f6dd614a293 in ?
 (version 22.1.3.7 (official build))
2022.08.06 20:21:38.058883 [ 1 ] {} <Warning> Application: Calculated checksum of the binary: 38FD0E3944230CBD1E0C1028A9D68C83. There is no information about the reference checksum.
2022.08.06 20:21:38.185252 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:21:38.198708 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:21:38.199565 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:21:38.200196 [ 1 ] {} <Warning> Application: Listen [::]:9004 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:21:38.200733 [ 1 ] {} <Warning> Application: Listen [::]:9005 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:42:34.011914 [ 56 ] {04a840d4-eb12-4613-ad3f-430bfbf1e678} <Error> executeQuery: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: create user tokouser identified by 'aPchGhui!';), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:42:34.012798 [ 56 ] {04a840d4-eb12-4613-ad3f-430bfbf1e678} <Error> TCPHandler: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:45:19.659021 [ 56 ] {da92048e-491f-4953-8511-ccae9d29ff8a} <Error> executeQuery: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: CREATE USER tokouser HOST IP '127.0.0.1' IDENTIFIED WITH sha256_password BY 'aPchGhui!';), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:45:19.659323 [ 56 ] {da92048e-491f-4953-8511-ccae9d29ff8a} <Error> TCPHandler: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:15.073319 [ 56 ] {eef60e10-6bd6-4685-97bf-a030534b85a9} <Error> executeQuery: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: create user tokouser identified by 'aPchGhui!';), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:15.073621 [ 56 ] {eef60e10-6bd6-4685-97bf-a030534b85a9} <Error> TCPHandler: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant CREATE USER ON *.*. (ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::InterpreterCreateUserQuery::execute() @ 0x13d47791 in /usr/bin/clickhouse
4. ? @ 0x13d1434c in /usr/bin/clickhouse
5. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
6. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
7. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
8. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
9. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
10. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
11. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
12. ? @ 0x7fe6b0889609 in ?
13. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:42.033680 [ 56 ] {302f4eff-9aca-463e-ba1a-8234d1eadda1} <Error> executeQuery: Code: 60. DB::Exception: Table INFORMATION_SCHEMA.USERS doesn't exist. (UNKNOWN_TABLE) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: select * from INFORMATION_SCHEMA.USERS;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0xa89b823 in /usr/bin/clickhouse
2. void std::__1::__optional_storage_base<DB::Exception, false>::__construct<int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x1352ac0f in /usr/bin/clickhouse
3. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Exception>*) const @ 0x13519082 in /usr/bin/clickhouse
4. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>) const @ 0x1352126b in /usr/bin/clickhouse
5. DB::JoinedTables::getLeftTableStorage() @ 0x13ae925c in /usr/bin/clickhouse
6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x13a661f4 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13a65594 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abea62 in /usr/bin/clickhouse
9. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abd150 in /usr/bin/clickhouse
10. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13a103d6 in /usr/bin/clickhouse
11. ? @ 0x13d13f8d in /usr/bin/clickhouse
12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
13. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
14. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
15. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
16. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
17. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
19. ? @ 0x7fe6b0889609 in ?
20. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:42.034093 [ 56 ] {302f4eff-9aca-463e-ba1a-8234d1eadda1} <Error> TCPHandler: Code: 60. DB::Exception: Table INFORMATION_SCHEMA.USERS doesn't exist. (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0xa89b823 in /usr/bin/clickhouse
2. void std::__1::__optional_storage_base<DB::Exception, false>::__construct<int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x1352ac0f in /usr/bin/clickhouse
3. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Exception>*) const @ 0x13519082 in /usr/bin/clickhouse
4. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>) const @ 0x1352126b in /usr/bin/clickhouse
5. DB::JoinedTables::getLeftTableStorage() @ 0x13ae925c in /usr/bin/clickhouse
6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x13a661f4 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13a65594 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abea62 in /usr/bin/clickhouse
9. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abd150 in /usr/bin/clickhouse
10. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13a103d6 in /usr/bin/clickhouse
11. ? @ 0x13d13f8d in /usr/bin/clickhouse
12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
13. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
14. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
15. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
16. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
17. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
19. ? @ 0x7fe6b0889609 in ?
20. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:51.286917 [ 56 ] {5d7acd72-1541-40ed-9f4f-897f42dca0de} <Error> executeQuery: Code: 60. DB::Exception: Table INFORMATION_SCHEMA.USER doesn't exist. (UNKNOWN_TABLE) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: select * from INFORMATION_SCHEMA.USER;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0xa89b823 in /usr/bin/clickhouse
2. void std::__1::__optional_storage_base<DB::Exception, false>::__construct<int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x1352ac0f in /usr/bin/clickhouse
3. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Exception>*) const @ 0x13519082 in /usr/bin/clickhouse
4. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>) const @ 0x1352126b in /usr/bin/clickhouse
5. DB::JoinedTables::getLeftTableStorage() @ 0x13ae925c in /usr/bin/clickhouse
6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x13a661f4 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13a65594 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abea62 in /usr/bin/clickhouse
9. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abd150 in /usr/bin/clickhouse
10. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13a103d6 in /usr/bin/clickhouse
11. ? @ 0x13d13f8d in /usr/bin/clickhouse
12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
13. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
14. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
15. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
16. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
17. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
19. ? @ 0x7fe6b0889609 in ?
20. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:46:51.287287 [ 56 ] {5d7acd72-1541-40ed-9f4f-897f42dca0de} <Error> TCPHandler: Code: 60. DB::Exception: Table INFORMATION_SCHEMA.USER doesn't exist. (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0xa89b823 in /usr/bin/clickhouse
2. void std::__1::__optional_storage_base<DB::Exception, false>::__construct<int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int const&, char const (&) [23], std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x1352ac0f in /usr/bin/clickhouse
3. DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Exception>*) const @ 0x13519082 in /usr/bin/clickhouse
4. DB::DatabaseCatalog::getTable(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>) const @ 0x1352126b in /usr/bin/clickhouse
5. DB::JoinedTables::getLeftTableStorage() @ 0x13ae925c in /usr/bin/clickhouse
6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x13a661f4 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13a65594 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abea62 in /usr/bin/clickhouse
9. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x13abd150 in /usr/bin/clickhouse
10. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13a103d6 in /usr/bin/clickhouse
11. ? @ 0x13d13f8d in /usr/bin/clickhouse
12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
13. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
14. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
15. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
16. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
17. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
19. ? @ 0x7fe6b0889609 in ?
20. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:47:16.667114 [ 56 ] {ff6e6b13-32f7-430a-8792-53fcdd71fcd5} <Error> executeQuery: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant SHOW USERS ON *.*. (ACCESS_DENIED) (version 22.1.3.7 (official build)) (from 172.17.0.3:46428) (in query: show users;), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::Context::checkAccess(DB::AccessFlags const&) const @ 0x13493e68 in /usr/bin/clickhouse
4. DB::StorageSystemUsers::fillData(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryInfo const&) const @ 0x12c30cb3 in /usr/bin/clickhouse
5. DB::IStorageSystemOneBlock<DB::StorageSystemUsers>::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x12be1856 in /usr/bin/clickhouse
6. DB::IStorage::read(DB::QueryPlan&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x13e8a3d2 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0x13a783ba in /usr/bin/clickhouse
8. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::optional<DB::Pipe>) @ 0x13a70454 in /usr/bin/clickhouse
9. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x13a6ff90 in /usr/bin/clickhouse
10. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x13abfc03 in /usr/bin/clickhouse
11. DB::InterpreterSelectWithUnionQuery::execute() @ 0x13ac0ca8 in /usr/bin/clickhouse
12. ? @ 0x13d1434c in /usr/bin/clickhouse
13. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
14. DB::InterpreterShowAccessEntitiesQuery::execute() @ 0x13d5067b in /usr/bin/clickhouse
15. ? @ 0x13d1434c in /usr/bin/clickhouse
16. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
23. ? @ 0x7fe6b0889609 in ?
24. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:47:16.667462 [ 56 ] {ff6e6b13-32f7-430a-8792-53fcdd71fcd5} <Error> TCPHandler: Code: 497. DB::Exception: default: Not enough privileges. To execute this query it's necessary to have grant SHOW USERS ON *.*. (ACCESS_DENIED), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x12eab21b in /usr/bin/clickhouse
2. bool DB::ContextAccess::checkAccessImplHelper<true, false>(DB::AccessFlags const&) const @ 0x12ea9db9 in /usr/bin/clickhouse
3. DB::Context::checkAccess(DB::AccessFlags const&) const @ 0x13493e68 in /usr/bin/clickhouse
4. DB::StorageSystemUsers::fillData(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryInfo const&) const @ 0x12c30cb3 in /usr/bin/clickhouse
5. DB::IStorageSystemOneBlock<DB::StorageSystemUsers>::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x12be1856 in /usr/bin/clickhouse
6. DB::IStorage::read(DB::QueryPlan&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x13e8a3d2 in /usr/bin/clickhouse
7. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0x13a783ba in /usr/bin/clickhouse
8. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::optional<DB::Pipe>) @ 0x13a70454 in /usr/bin/clickhouse
9. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x13a6ff90 in /usr/bin/clickhouse
10. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x13abfc03 in /usr/bin/clickhouse
11. DB::InterpreterSelectWithUnionQuery::execute() @ 0x13ac0ca8 in /usr/bin/clickhouse
12. ? @ 0x13d1434c in /usr/bin/clickhouse
13. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
14. DB::InterpreterShowAccessEntitiesQuery::execute() @ 0x13d5067b in /usr/bin/clickhouse
15. ? @ 0x13d1434c in /usr/bin/clickhouse
16. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
23. ? @ 0x7fe6b0889609 in ?
24. __clone @ 0x7fe6b07aa293 in ?

2022.08.06 20:50:43.676563 [ 1 ] {} <Warning> Application: Calculated checksum of the binary: 38FD0E3944230CBD1E0C1028A9D68C83. There is no information about the reference checksum.
2022.08.06 20:50:43.838599 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:50:43.839141 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:50:43.839727 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:50:43.840465 [ 1 ] {} <Warning> Application: Listen [::]:9004 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 20:50:43.841081 [ 1 ] {} <Warning> Application: Listen [::]:9005 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:04:17.235890 [ 55 ] {c13aaa20-af61-4ff0-a92e-1c7f5befeb4e} <Error> executeQuery: Code: 493. DB::Exception: user `tokouser`: cannot insert because user `tokouser` already exists in local directory. (ACCESS_ENTITY_ALREADY_EXISTS) (version 22.1.3.7 (official build)) (from 172.17.0.3:47342) (in query: CREATE USER tokouser IDENTIFIED WITH PLAINTEXT_PASSWORD BY 'aPchGhui!';), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::IAccessStorage::throwNameCollisionCannotInsert(DB::AccessEntityType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0x12effc61 in /usr/bin/clickhouse
2. DB::DiskAccessStorage::insertNoLock(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool, std::__1::vector<std::__1::tuple<std::__1::function<void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&)>, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::__1::shared_ptr<DB::IAccessEntity const> >, std::__1::allocator<std::__1::tuple<std::__1::function<void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&)>, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::__1::shared_ptr<DB::IAccessEntity const> > > >&) @ 0x12eda50f in /usr/bin/clickhouse
3. DB::DiskAccessStorage::insertImpl(std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool) @ 0x12eda206 in /usr/bin/clickhouse
4. DB::MultipleAccessStorage::insertImpl(std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool) @ 0x12f1c934 in /usr/bin/clickhouse
5. DB::IAccessStorage::insert(std::__1::vector<std::__1::shared_ptr<DB::IAccessEntity const>, std::__1::allocator<std::__1::shared_ptr<DB::IAccessEntity const> > > const&, bool, bool) @ 0x12efa613 in /usr/bin/clickhouse
6. DB::InterpreterCreateUserQuery::execute() @ 0x13d4828a in /usr/bin/clickhouse
7. ? @ 0x13d1434c in /usr/bin/clickhouse
8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
9. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
10. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
11. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
12. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
13. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
15. ? @ 0x7fde06771609 in ?
16. __clone @ 0x7fde06692293 in ?

2022.08.06 21:04:17.236951 [ 55 ] {c13aaa20-af61-4ff0-a92e-1c7f5befeb4e} <Error> TCPHandler: Code: 493. DB::Exception: user `tokouser`: cannot insert because user `tokouser` already exists in local directory. (ACCESS_ENTITY_ALREADY_EXISTS), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82d07a in /usr/bin/clickhouse
1. DB::IAccessStorage::throwNameCollisionCannotInsert(DB::AccessEntityType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0x12effc61 in /usr/bin/clickhouse
2. DB::DiskAccessStorage::insertNoLock(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool, std::__1::vector<std::__1::tuple<std::__1::function<void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&)>, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::__1::shared_ptr<DB::IAccessEntity const> >, std::__1::allocator<std::__1::tuple<std::__1::function<void (StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&, std::__1::shared_ptr<DB::IAccessEntity const> const&)>, StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::__1::shared_ptr<DB::IAccessEntity const> > > >&) @ 0x12eda50f in /usr/bin/clickhouse
3. DB::DiskAccessStorage::insertImpl(std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool) @ 0x12eda206 in /usr/bin/clickhouse
4. DB::MultipleAccessStorage::insertImpl(std::__1::shared_ptr<DB::IAccessEntity const> const&, bool, bool) @ 0x12f1c934 in /usr/bin/clickhouse
5. DB::IAccessStorage::insert(std::__1::vector<std::__1::shared_ptr<DB::IAccessEntity const>, std::__1::allocator<std::__1::shared_ptr<DB::IAccessEntity const> > > const&, bool, bool) @ 0x12efa613 in /usr/bin/clickhouse
6. DB::InterpreterCreateUserQuery::execute() @ 0x13d4828a in /usr/bin/clickhouse
7. ? @ 0x13d1434c in /usr/bin/clickhouse
8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13d11e55 in /usr/bin/clickhouse
9. DB::TCPHandler::runImpl() @ 0x147f050f in /usr/bin/clickhouse
10. DB::TCPHandler::run() @ 0x14804259 in /usr/bin/clickhouse
11. Poco::Net::TCPServerConnection::start() @ 0x1745e52f in /usr/bin/clickhouse
12. Poco::Net::TCPServerDispatcher::run() @ 0x17460981 in /usr/bin/clickhouse
13. Poco::PooledThread::run() @ 0x17611609 in /usr/bin/clickhouse
14. Poco::ThreadImpl::runnableEntry(void*) @ 0x1760ed00 in /usr/bin/clickhouse
15. ? @ 0x7fde06771609 in ?
16. __clone @ 0x7fde06692293 in ?

2022.08.06 21:06:03.897198 [ 1 ] {} <Warning> Application: Calculated checksum of the binary: 38FD0E3944230CBD1E0C1028A9D68C83. There is no information about the reference checksum.
2022.08.06 21:06:04.080431 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:04.093756 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:04.094157 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:04.094513 [ 1 ] {} <Warning> Application: Listen [::]:9004 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:04.095015 [ 1 ] {} <Warning> Application: Listen [::]:9005 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:50.716003 [ 1 ] {} <Warning> Application: Calculated checksum of the binary: 38FD0E3944230CBD1E0C1028A9D68C83. There is no information about the reference checksum.
2022.08.06 21:06:50.850377 [ 1 ] {} <Warning> Application: Listen [::]:8123 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:50.850807 [ 1 ] {} <Warning> Application: Listen [::]:9000 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:50.851201 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:50.851650 [ 1 ] {} <Warning> Application: Listen [::]:9004 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2022.08.06 21:06:50.852032 [ 1 ] {} <Warning> Application: Listen [::]:9005 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 22.1.3.7 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
